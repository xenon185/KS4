/********************************************************************
	Autor: NPA
	Datum: 13.12.2016
	Dateiname: transmit
	Version: 1.0

	Kurzbeschreibung: Versendet ein einfaches Zeichen über die
	UART-Schnittstelle TxD PA0

	Änderungen:
	Version	Name	Datum		Kurzbeschreibung
	------------------------------------------------------------------
	1.0		NPA		13.12.2016	1. Programmaufbau
 *********************************************************************/

/*
 * Baudrate - Calculation
 *
 * BRD = SysClk / (16 * gewuenschte Bitrate)
 * IBRD = int(BRD)
 * FBRD = int( (BRD-IBRD * 64 + 0.5)
 */

/*
 *	PA0 -> RxD0
 *	PA1 -> TxD0
 */

/*
 * VARIANTE 2:
 * 115200 bit/s
 * 2 stop bit
 * parity even
 */

#include <stdio.h>
#include <stdint.h>
#include "tm4c1294ncpdt.h"

#define BITRATE 115200
#define SYSCLK 25000000.0
#define BRD SYSCLK / (16 * BITRATE)
#define IBRD (int) BRD
#define FBRD (int) (((BRD-IBRD) * 64) + 0.5 )

#define BITDATA 0x54
#define WAITLOOPLENGTH 2000



void main(void) {

	uint8_t wt=0;
	uint32_t i=0;


	/******************************
	 * CLOCK - Settings
	 ******************************/
	// switch over to main quartz oscillator at 25MHz
	// clear MOSC power down, high oscillator range setting, and no crystal present setting
	SYSCTL_MOSCCTL_R &= ~(SYSCTL_MOSCCTL_OSCRNG | SYSCTL_MOSCCTL_PWRDN | SYSCTL_MOSCCTL_NOXTAL);
	// increase the drive strength for MOSC
	SYSCTL_MOSCCTL_R |= SYSCTL_MOSCCTL_OSCRNG;
	// set the main oscillator as main clock
	SYSCTL_RSCLKCFG_R = SYSCTL_RSCLKCFG_OSCSRC_MOSC;

	/******************************
	 * PORTC - Define
	 ******************************/
	SYSCTL_RCGCGPIO_R |= SYSCTL_RCGCGPIO_R2; wt++;
	GPIO_PORTC_AHB_DEN_R = 0x30;
	GPIO_PORTC_AHB_DIR_R = 0x30;

	/******************************
	 * PORTA - Define
	 ******************************/
	SYSCTL_RCGCGPIO_R |= SYSCTL_RCGCGPIO_R0; wt++;
	GPIO_PORTA_AHB_DEN_R |= 0x02;
	GPIO_PORTA_AHB_DIR_R |= 0x02;
	// alternative pin function PA1 -> TxD0
	GPIO_PORTA_AHB_AFSEL_R |= 0x02;
	// controls the MUX for a pin example PA.1 -> TxD0
	// each nipple (4-Bit) configure Output Bit
	GPIO_PORTA_AHB_PCTL_R |= 0x00000010;

	/******************************
	 * UART - Define
	 ******************************/
	// enable clock at UART module 0
	SYSCTL_RCGCUART_R |= SYSCTL_RCGCUART_R0;
	// disable UART during initialization
	UART0_CTL_R &= ~UART_CTL_UARTEN;
	// configure BAUD rate
	// set DIVINT of BRD
	UART0_IBRD_R = IBRD;
	// set DIVFRAC of BRD
	UART0_FBRD_R = FBRD;
	// set Frame-Parameter
	// WLEN_x = bits
	// PEN 0 parity disable 1 enable
	// EPS 0 odd parity 1 even
	// STP2 0 one stop bit 1 two stop bits
	UART0_LCRH_R |= (UART_LCRH_WLEN_8 | UART_LCRH_PEN | UART_LCRH_EPS | UART_LCRH_STP2);
	// after initialization re-enable UART0
	UART0_CTL_R |= (UART_CTL_UARTEN | UART_CTL_TXE); wt++;

	while(1) {
		GPIO_PORTC_AHB_DATA_R = 0x20;
		// Warum reicht es nicht aus nur das TXFE abzufragen?
		while(!(UART0_FR_R & UART_FR_TXFE)){
			// Soll die einzelnen Bits selektieren, wenns nicht funktioniert -> raus damit
			GPIO_PORTC_AHB_DATA_R = ((1 << 5) | ((~GPIO_PORTC_AHB_DATA_R) & 0x10));
		}
		UART0_DR_R = BITDATA;
		GPIO_PORTC_AHB_DATA_R = 0x00;
		for(i=0; i<WAITLOOPLENGTH; i++);
	}
}
